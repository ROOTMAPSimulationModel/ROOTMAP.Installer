# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
    - master

pool:
    vmImage: "windows-2022"

variables:
    buildConfiguration: "Release"

steps:
    - checkout: self
      submodules: recursive

    - task: gitversion/setup@0
      inputs:
          versionSpec: "5.x"

    - task: gitversion/execute@0
      displayName: "Determine version"

    - task: gitversion/execute@0
      displayName: "Display GitVersion config"
      inputs:
          additionalArguments: "/showConfig"

    - script: |
          echo Major: $(GitVersion.Major)
          echo Minor: $(GitVersion.Minor)
          echo Patch: $(GitVersion.Patch)
          echo PreReleaseTag: $(GitVersion.PreReleaseTag)
          echo PreReleaseTagWithDash: $(GitVersion.PreReleaseTagWithDash)
          echo PreReleaseLabel: $(GitVersion.PreReleaseLabel)
          echo PreReleaseNumber: $(GitVersion.PreReleaseNumber)
          echo WeightedPreReleaseNumber: $(GitVersion.WeightedPreReleaseNumber)
          echo BuildMetaData: $(GitVersion.BuildMetaData)
          echo BuildMetaDataPadded: $(GitVersion.BuildMetaDataPadded)
          echo FullBuildMetaData: $(GitVersion.FullBuildMetaData)
          echo MajorMinorPatch: $(GitVersion.MajorMinorPatch)
          echo SemVer: $(GitVersion.SemVer)
          echo LegacySemVer: $(GitVersion.LegacySemVer)
          echo LegacySemVerPadded: $(GitVersion.LegacySemVerPadded)
          echo AssemblySemVer: $(GitVersion.AssemblySemVer)
          echo AssemblySemFileVer: $(GitVersion.AssemblySemFileVer)
          echo FullSemVer: $(GitVersion.FullSemVer)
          echo InformationalVersion: $(GitVersion.InformationalVersion)
          echo BranchName: $(GitVersion.BranchName)
          echo EscapedBranchName: $(GitVersion.EscapedBranchName)
          echo Sha: $(GitVersion.Sha)
          echo ShortSha: $(GitVersion.ShortSha)
          echo NuGetVersionV2: $(GitVersion.NuGetVersionV2)
          echo NuGetVersion: $(GitVersion.NuGetVersion)
          echo NuGetPreReleaseTagV2: $(GitVersion.NuGetPreReleaseTagV2)
          echo NuGetPreReleaseTag: $(GitVersion.NuGetPreReleaseTag)
          echo VersionSourceSha: $(GitVersion.VersionSourceSha)
          echo CommitsSinceVersionSource: $(GitVersion.CommitsSinceVersionSource)
          echo CommitsSinceVersionSourcePadded: $(GitVersion.CommitsSinceVersionSourcePadded)
          echo UncommittedChanges: $(GitVersion.UncommittedChanges)
          echo CommitDate: $(GitVersion.CommitDate)

    - script: "@echo ##vso[build.updatebuildnumber]$(GitVersion.NuGetVersionV2)"
      displayName: "Set build version"

    - task: NuGetToolInstaller@1

    - task: PowerShell@2
      inputs:
          filePath: 'ROOTMAP.CLI\ROOTMAP.Core\Prepare-ROOTMAP-Dependencies.ps1'
          arguments: "-forceCleanInstall"

    - task: PowerShell@2
      inputs:
          filePath: 'ROOTMAP.Native\ROOTMAP.Core\Prepare-ROOTMAP-Dependencies.ps1'
          arguments: "-forceCleanInstall"

    - task: NuGetCommand@2
      inputs:
          restoreSolution: 'ROOTMAP.CLI\ROOTMAP.CLI.sln'

    - task: NuGetCommand@2
      inputs:
          restoreSolution: 'ROOTMAP.Native\ROOTMAP.Native.sln'

    - task: MSBuild@1
      inputs:
          solution: 'ROOTMAP.CLI\ROOTMAP.CLI.sln'
          platform: "x86"
          configuration: "$(buildConfiguration)"
          msbuildArguments: "/p:Version=$(Build.BuildNumber)"

    - task: MSBuild@1
      inputs:
          solution: 'ROOTMAP.Native\ROOTMAP.Native.sln'
          platform: "x86"
          configuration: "$(buildConfiguration)"
          msbuildArguments: "/p:Version=$(Build.BuildNumber)"

    - script: build.cmd $(buildConfiguration) $(Build.BuildNumber)
      displayName: Run a custom script to build the dotnet core components of the ROOTMAP suite
      workingDirectory: "."

    - task: CopyFiles@2
      inputs:
          SourceFolder: "$(system.defaultworkingdirectory)"
          Contents: |
              ROOTMAP.CLI\$(BuildConfiguration)\**\*
              ROOTMAP.Native\$(BuildConfiguration)\**\*
              ROOTMAP.Native\Configurations\**\*
              ROOTMAP.Native\Documentation\**\*
              ROOTMAP.Native\Postprocessing\**\*
              ROOTMAP.Native\Raytracing\**\*
              ROOTMAP.Native\*.cfg
              ROOTMAP.Configurator\**\*
              *.nsi
          TargetFolder: "$(build.artifactstagingdirectory)"

    - task: PublishBuildArtifacts@1
      inputs:
          PathtoPublish: "$(Build.ArtifactStagingDirectory)"
          ArtifactName: "drop"
          publishLocation: "Container"
